{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\web development\\\\React Three Fiber\\\\Shaders\\\\firstShader\\\\src\\\\app.jsx\",\n  _s = $RefreshSig$();\nimport planeVertex from './shaders/test/vertex.js';\nimport planeFragment from './shaders/test/fragment.js';\nimport blobVertex from './shaders/blob/vertex.js';\nimport blobFragment from './shaders/blob/fragment.js';\nimport { useRef } from 'react';\nimport { shaderMaterial, OrbitControls } from '@react-three/drei';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Color } from 'three';\n\n//just use the shaderMaterial helper from the drei its so simple to use\n//plane Material\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlaneMaterial = shaderMaterial({\n  u_time: 0,\n  u_colorA: new Color(\"#FFE486\"),\n  u_colorB: new Color(\"#FEB3D9\")\n}, planeVertex, planeFragment);\nextend({\n  PlaneMaterial\n}); //so that we can use it as a component\n\n//for blob material\nconst BlobMaterial = shaderMaterial({\n  u_time: 0.0,\n  u_intensity: 0.3,\n  u_colorB: new Color(\"#FEB3D9\")\n}, blobVertex, blobFragment);\nextend({\n  BlobMaterial\n}); //so that we can use it as a component\n\nfunction App() {\n  _s();\n  const plane = useRef(); //direct access to the plane mesh\n  const blob = useRef(); //direct access to the blob mesh\n\n  const planeMaterial = useRef(); //reference of the plane shader material\n  const blobMaterial = useRef(); //reference of the blob shader material\n\n  useFrame((state, delta) => {\n    // planeMaterial.current.u_time = state.clock.elapsedTime;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: blob,\n      position: [0, 0, 0],\n      scale: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        args: [2, 20]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"blobMaterial\", {\n        ref: blobMaterial\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"bXVpnvmlqgrLaMlODlafl5SYtso=\", false, function () {\n  return [useFrame];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["planeVertex","planeFragment","blobVertex","blobFragment","useRef","shaderMaterial","OrbitControls","useFrame","extend","Color","jsxDEV","_jsxDEV","Fragment","_Fragment","PlaneMaterial","u_time","u_colorA","u_colorB","BlobMaterial","u_intensity","App","_s","plane","blob","planeMaterial","blobMaterial","state","delta","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","position","scale","args","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/web development/React Three Fiber/Shaders/firstShader/src/app.jsx"],"sourcesContent":["import planeVertex from './shaders/test/vertex.js'\r\nimport planeFragment from './shaders/test/fragment.js'\r\nimport blobVertex from './shaders/blob/vertex.js'\r\nimport blobFragment from './shaders/blob/fragment.js'\r\nimport { useRef } from 'react'\r\nimport { shaderMaterial,OrbitControls } from '@react-three/drei'\r\nimport { useFrame,extend } from '@react-three/fiber';\r\nimport { Color } from 'three';\r\n\r\n//just use the shaderMaterial helper from the drei its so simple to use\r\n//plane Material\r\nconst PlaneMaterial = shaderMaterial(\r\n    {\r\n        u_time:0,\r\n        u_colorA:  new Color(\"#FFE486\") ,\r\n        u_colorB:  new Color(\"#FEB3D9\") ,  \r\n    },\r\n    planeVertex,\r\n    planeFragment\r\n)\r\nextend({PlaneMaterial});//so that we can use it as a component\r\n\r\n\r\n\r\n//for blob material\r\nconst BlobMaterial = shaderMaterial(\r\n    {\r\n        u_time:0.0,\r\n        u_intensity:0.3,\r\n        u_colorB:  new Color(\"#FEB3D9\") ,  \r\n    },\r\n    blobVertex,\r\n    blobFragment\r\n)\r\nextend({BlobMaterial});//so that we can use it as a component\r\n\r\n\r\n\r\nfunction App(){\r\n    const plane = useRef();//direct access to the plane mesh\r\n    const blob = useRef();//direct access to the blob mesh\r\n\r\n    const planeMaterial = useRef();//reference of the plane shader material\r\n    const blobMaterial = useRef();//reference of the blob shader material\r\n\r\n  useFrame((state,delta)=>{\r\n        // planeMaterial.current.u_time = state.clock.elapsedTime;\r\n        \r\n  })\r\n\r\n  return (\r\n    <>\r\n    <OrbitControls />{ /** using the orbit controls */ }\r\n\r\n    {/** for plane */}\r\n      {/* <mesh ref={plane} position={[0, 0, 0]}  rotation={[-Math.PI / 2, 0, 0]} scale={1.5}>\r\n        <planeGeometry args={[2, 20]} />\r\n        <planeMaterial ref={ planeMaterial } />\r\n      </mesh> */}\r\n\r\n    {/** for blob */}\r\n      <mesh ref={blob} position={[0, 0, 0]} scale={1.5}>\r\n        <icosahedronGeometry args={[2, 20]} />\r\n        <blobMaterial ref={ blobMaterial } />\r\n      </mesh>\r\n\r\n    </>\r\n  )\r\n}\r\nexport default App"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,MAAM,QAAQ,OAAO;AAC9B,SAASC,cAAc,EAACC,aAAa,QAAQ,mBAAmB;AAChE,SAASC,QAAQ,EAACC,MAAM,QAAQ,oBAAoB;AACpD,SAASC,KAAK,QAAQ,OAAO;;AAE7B;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,aAAa,GAAGT,cAAc,CAChC;EACIU,MAAM,EAAC,CAAC;EACRC,QAAQ,EAAG,IAAIP,KAAK,CAAC,SAAS,CAAC;EAC/BQ,QAAQ,EAAG,IAAIR,KAAK,CAAC,SAAS;AAClC,CAAC,EACDT,WAAW,EACXC,aAAa,CAChB;AACDO,MAAM,CAAC;EAACM;AAAa,CAAC,CAAC,CAAC;;AAIxB;AACA,MAAMI,YAAY,GAAGb,cAAc,CAC/B;EACIU,MAAM,EAAC,GAAG;EACVI,WAAW,EAAC,GAAG;EACfF,QAAQ,EAAG,IAAIR,KAAK,CAAC,SAAS;AAClC,CAAC,EACDP,UAAU,EACVC,YAAY,CACf;AACDK,MAAM,CAAC;EAACU;AAAY,CAAC,CAAC,CAAC;;AAIvB,SAASE,GAAGA,CAAA,EAAE;EAAAC,EAAA;EACV,MAAMC,KAAK,GAAGlB,MAAM,EAAE,CAAC;EACvB,MAAMmB,IAAI,GAAGnB,MAAM,EAAE,CAAC;;EAEtB,MAAMoB,aAAa,GAAGpB,MAAM,EAAE,CAAC;EAC/B,MAAMqB,YAAY,GAAGrB,MAAM,EAAE,CAAC;;EAEhCG,QAAQ,CAAC,CAACmB,KAAK,EAACC,KAAK,KAAG;IAClB;EAAA,CAEL,CAAC;EAEF,oBACEhB,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACAjB,OAAA,CAACL,aAAa;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eASfrB,OAAA;MAAMsB,GAAG,EAAEV,IAAK;MAACW,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAACC,KAAK,EAAE,GAAI;MAAAP,QAAA,gBAC/CjB,OAAA;QAAqByB,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACtCrB,OAAA;QAAcsB,GAAG,EAAGR;MAAc;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChC;EAAA,gBAEN;AAEP;AAACX,EAAA,CA9BQD,GAAG;EAAA,QAOVb,QAAQ;AAAA;AAAA8B,EAAA,GAPDjB,GAAG;AA+BZ,eAAeA,GAAG;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}