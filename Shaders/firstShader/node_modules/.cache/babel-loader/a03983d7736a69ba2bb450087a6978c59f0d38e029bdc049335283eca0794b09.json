{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\web development\\\\React Three Fiber\\\\Shaders\\\\firstShader\\\\src\\\\app.jsx\",\n  _s = $RefreshSig$();\nimport vertex from './shaders/test/vertex.js';\nimport fragment from './shaders/test/fragment.js';\nimport { useRef } from 'react';\nimport { shaderMaterial, OrbitControls } from '@react-three/drei';\nimport { useFrame, extend } from '@react-three/fiber';\nimport { Color } from 'three';\n\n//just use the shaderMaterial helper from the drei its so simple to use\n//plane Material\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlaneMaterial = shaderMaterial({\n  u_time: 0,\n  u_colorA: new Color(\"#FFE486\"),\n  u_colorB: new Color(\"#FEB3D9\")\n}, vertex, fragment);\nextend({\n  PlaneMaterial\n}); //so that we can use it as a component\n\n//for blob material\nconst BlobMaterial = shaderMaterial({\n  u_time: 0,\n  u_colorA: new Color(\"#FFE486\"),\n  u_colorB: new Color(\"#FEB3D9\")\n}, vertex, fragment);\nextend({\n  BlobMaterial\n}); //so that we can use it as a component\n\nfunction App() {\n  _s();\n  const ref = useRef();\n  const planeMaterial = useRef(); //reference of the shader material\n\n  useFrame((state, delta) => {\n    planeMaterial.current.u_time = state.clock.elapsedTime;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: ref,\n      position: [0, 0, 0],\n      rotation: [-Math.PI / 2, 0, 0],\n      scale: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        args: [2, 20]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"blobMaterial\", {\n        ref: Material\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: ref,\n      position: [0, 0, 0],\n      rotation: [-Math.PI / 2, 0, 0],\n      scale: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n        args: [2, 20]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"blobMaterial\", {\n        ref: Material\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"nlzpOt/+FRRFGm9HFyDJ6GlzsGE=\", false, function () {\n  return [useFrame];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["vertex","fragment","useRef","shaderMaterial","OrbitControls","useFrame","extend","Color","jsxDEV","_jsxDEV","Fragment","_Fragment","PlaneMaterial","u_time","u_colorA","u_colorB","BlobMaterial","App","_s","ref","planeMaterial","state","delta","current","clock","elapsedTime","children","fileName","_jsxFileName","lineNumber","columnNumber","position","rotation","Math","PI","scale","args","Material","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/web development/React Three Fiber/Shaders/firstShader/src/app.jsx"],"sourcesContent":["import vertex from './shaders/test/vertex.js'\r\nimport fragment from './shaders/test/fragment.js'\r\nimport { useRef } from 'react'\r\nimport { shaderMaterial,OrbitControls } from '@react-three/drei'\r\nimport { useFrame,extend } from '@react-three/fiber';\r\nimport { Color } from 'three';\r\n\r\n//just use the shaderMaterial helper from the drei its so simple to use\r\n//plane Material\r\nconst PlaneMaterial = shaderMaterial(\r\n    {\r\n        u_time:0,\r\n        u_colorA:  new Color(\"#FFE486\") ,\r\n        u_colorB:  new Color(\"#FEB3D9\") ,  \r\n    },\r\n    vertex,\r\n    fragment\r\n)\r\nextend({PlaneMaterial});//so that we can use it as a component\r\n\r\n\r\n\r\n//for blob material\r\nconst BlobMaterial = shaderMaterial(\r\n    {\r\n        u_time:0,\r\n        u_colorA:  new Color(\"#FFE486\") ,\r\n        u_colorB:  new Color(\"#FEB3D9\") ,  \r\n    },\r\n    vertex,\r\n    fragment\r\n)\r\nextend({BlobMaterial});//so that we can use it as a component\r\n\r\n\r\n\r\nfunction App(){\r\n  const ref = useRef();\r\n\r\n  const planeMaterial = useRef();//reference of the shader material\r\n\r\n  useFrame((state,delta)=>{\r\n        planeMaterial.current.u_time = state.clock.elapsedTime;\r\n  })\r\n\r\n  return (\r\n    <>\r\n    <OrbitControls />{ /** using the orbit controls */ }\r\n\r\n    {/** for plane */}\r\n      <mesh ref={ref} position={[0, 0, 0]}  rotation={[-Math.PI / 2, 0, 0]} scale={1.5}>\r\n        <icosahedronGeometry args={[2, 20]} />\r\n        <blobMaterial ref={ Material } />{ /** Now we are using it as a tag and its so simple */ }\r\n      </mesh>\r\n\r\n    \r\n      <mesh ref={ref} position={[0, 0, 0]}  rotation={[-Math.PI / 2, 0, 0]} scale={1.5}>\r\n        <icosahedronGeometry args={[2, 20]} />\r\n        <blobMaterial ref={ Material } />{ /** Now we are using it as a tag and its so simple */ }\r\n      </mesh>\r\n\r\n    </>\r\n  )\r\n}\r\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}