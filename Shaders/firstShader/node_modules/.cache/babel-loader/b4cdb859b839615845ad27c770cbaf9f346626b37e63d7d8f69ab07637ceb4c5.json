{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, Vector2, Color } from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineGeometry } from 'three-stdlib';\nconst Line = /*#__PURE__*/React.forwardRef(function Line(_ref, ref) {\n  let {\n    points,\n    color = 'black',\n    vertexColors,\n    linewidth,\n    lineWidth,\n    dashed,\n    ...rest\n  } = _ref;\n  const size = useThree(state => state.size);\n  const [line2] = React.useState(() => new Line2());\n  const [lineMaterial] = React.useState(() => new LineMaterial());\n  const lineGeom = React.useMemo(() => {\n    const geom = new LineGeometry();\n    const pValues = points.map(p => {\n      const isArray = Array.isArray(p);\n      return p instanceof Vector3 ? [p.x, p.y, p.z] : p instanceof Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n    });\n    geom.setPositions(pValues.flat());\n    if (vertexColors) {\n      const cValues = vertexColors.map(c => c instanceof Color ? c.toArray() : c);\n      geom.setColors(cValues.flat());\n    }\n    return geom;\n  }, [points, vertexColors]);\n  React.useLayoutEffect(() => {\n    line2.computeLineDistances();\n  }, [points, line2]);\n  React.useLayoutEffect(() => {\n    if (dashed) {\n      lineMaterial.defines.USE_DASH = '';\n    } else {\n      // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.\n      delete lineMaterial.defines.USE_DASH;\n    }\n    lineMaterial.needsUpdate = true;\n  }, [dashed, lineMaterial]);\n  React.useEffect(() => {\n    return () => lineGeom.dispose();\n  }, [lineGeom]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: line2,\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(\"primitive\", {\n    object: lineGeom,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: lineMaterial,\n    attach: \"material\",\n    color: color,\n    vertexColors: Boolean(vertexColors),\n    resolution: [size.width, size.height],\n    linewidth: linewidth !== null && linewidth !== void 0 ? linewidth : lineWidth,\n    dashed: dashed\n  }, rest)));\n});\nexport { Line };","map":{"version":3,"names":["_extends","React","Vector3","Vector2","Color","useThree","Line2","LineMaterial","LineGeometry","Line","forwardRef","_ref","ref","points","color","vertexColors","linewidth","lineWidth","dashed","rest","size","state","line2","useState","lineMaterial","lineGeom","useMemo","geom","pValues","map","p","isArray","Array","x","y","z","length","setPositions","flat","cValues","c","toArray","setColors","useLayoutEffect","computeLineDistances","defines","USE_DASH","needsUpdate","useEffect","dispose","createElement","object","attach","Boolean","resolution","width","height"],"sources":["C:/Users/Asus/OneDrive/Desktop/web development/React Three Fiber/Shaders/firstShader/node_modules/@react-three/drei/core/Line.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, Vector2, Color } from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineGeometry } from 'three-stdlib';\n\nconst Line = /*#__PURE__*/React.forwardRef(function Line({\n  points,\n  color = 'black',\n  vertexColors,\n  linewidth,\n  lineWidth,\n  dashed,\n  ...rest\n}, ref) {\n  const size = useThree(state => state.size);\n  const [line2] = React.useState(() => new Line2());\n  const [lineMaterial] = React.useState(() => new LineMaterial());\n  const lineGeom = React.useMemo(() => {\n    const geom = new LineGeometry();\n    const pValues = points.map(p => {\n      const isArray = Array.isArray(p);\n      return p instanceof Vector3 ? [p.x, p.y, p.z] : p instanceof Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n    });\n    geom.setPositions(pValues.flat());\n\n    if (vertexColors) {\n      const cValues = vertexColors.map(c => c instanceof Color ? c.toArray() : c);\n      geom.setColors(cValues.flat());\n    }\n\n    return geom;\n  }, [points, vertexColors]);\n  React.useLayoutEffect(() => {\n    line2.computeLineDistances();\n  }, [points, line2]);\n  React.useLayoutEffect(() => {\n    if (dashed) {\n      lineMaterial.defines.USE_DASH = '';\n    } else {\n      // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.\n      delete lineMaterial.defines.USE_DASH;\n    }\n\n    lineMaterial.needsUpdate = true;\n  }, [dashed, lineMaterial]);\n  React.useEffect(() => {\n    return () => lineGeom.dispose();\n  }, [lineGeom]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: line2,\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(\"primitive\", {\n    object: lineGeom,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: lineMaterial,\n    attach: \"material\",\n    color: color,\n    vertexColors: Boolean(vertexColors),\n    resolution: [size.width, size.height],\n    linewidth: linewidth !== null && linewidth !== void 0 ? linewidth : lineWidth,\n    dashed: dashed\n  }, rest)));\n});\n\nexport { Line };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}