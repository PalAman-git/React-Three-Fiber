import { InteractionGroups, RigidBody } from "@dimforge/rapier3d-compat";
import { FC } from "react";
import { Object3D } from "three";
import { Object3DProps } from "@react-three/fiber";
export declare type AttractorGravityType = "static" | "linear" | "newtonian";
export interface AttractorProps {
    /**
     * The relative position of this attractor
     */
    position?: Object3DProps["position"];
    /**
     * The strength of the attractor.
     * Positive values attract, negative values repel.
     *
     * @default 1
     */
    strength?: number;
    /**
     * The range of the attractor. Will not affect objects outside of this range.
     *
     * @default 10
     * @min 0
     */
    range?: number;
    /**
     * The type of gravity to use.
     * - static: The gravity is constant and does not change over time.
     * - linear: The gravity is linearly interpolated the closer the object is to the attractor.
     * - newtonian: The gravity is calculated using the newtonian gravity formula.
     * @default "static"
     */
    type?: AttractorGravityType;
    /**
     * The mass of the attractor. Used when type is `newtonian`.
     * @default 6.673e-11
     */
    gravitationalConstant?: number;
    /**
     * The collision groups that this attractor will apply effects to. If a RigidBody contains one or more colliders that are in one of the mask group, it will be affected by this attractor.
     * If not specified, the attractor will apply effects to all RigidBodies.
     */
    collisionGroups?: InteractionGroups;
}
export interface AttractorState extends Required<Omit<AttractorProps, "position" | "collisionGroups">> {
    object: Object3D;
    collisionGroups?: InteractionGroups;
}
export declare type AttractorStateMap = Map<Object3D["uuid"], AttractorState>;
export declare const applyAttractorForceOnRigidBody: (rigidBody: RigidBody, { object, strength, range, gravitationalConstant, collisionGroups, type }: AttractorState) => void;
export declare const Attractor: FC<AttractorProps>;
